//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "..\cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "MyTestLibrary";
};


// registrations start here


namespace
{
  XLRegistration::XLFunctionRegistrationHelper
registerddCheckVersion("xlddCheckVersion",
"ddCheckVersion",
"too lazy to comment this function ",
LibraryName,
0,
0
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddCheckVersion(
)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

std::string result(
	ddCheckVersion());
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamTPArgs[]=
{
{ "p","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamTP("xlddSteamTP",
"ddSteamTP",
"too lazy to comment this function ",
LibraryName,
ddSteamTPArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamTP(
double p)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	ddSteamTP(
		p)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamTPHArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "h","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamTPH("xlddSteamTPH",
"ddSteamTPH",
"too lazy to comment this function ",
LibraryName,
ddSteamTPHArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamTPH(
double p,
double h)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamTPH(
		p,
		h)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamTPSArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "s","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamTPS("xlddSteamTPS",
"ddSteamTPS",
"too lazy to comment this function ",
LibraryName,
ddSteamTPSArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamTPS(
double p,
double s)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamTPS(
		p,
		s)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamTHSArgs[]=
{
{ "h","too lazy to comment this one ","B"},
{ "s","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamTHS("xlddSteamTHS",
"ddSteamTHS",
"too lazy to comment this function ",
LibraryName,
ddSteamTHSArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamTHS(
double h,
double s)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamTHS(
		h,
		s)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamPTArgs[]=
{
{ "t","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamPT("xlddSteamPT",
"ddSteamPT",
"too lazy to comment this function ",
LibraryName,
ddSteamPTArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamPT(
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);


double result(
	ddSteamPT(
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamHPTArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "t","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamHPT("xlddSteamHPT",
"ddSteamHPT",
"too lazy to comment this function ",
LibraryName,
ddSteamHPTArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamHPT(
double p,
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamHPT(
		p,
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamHPSArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "s","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamHPS("xlddSteamHPS",
"ddSteamHPS",
"too lazy to comment this function ",
LibraryName,
ddSteamHPSArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamHPS(
double p,
double s)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamHPS(
		p,
		s)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamHPQArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "drynessX","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamHPQ("xlddSteamHPQ",
"ddSteamHPQ",
"too lazy to comment this function ",
LibraryName,
ddSteamHPQArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamHPQ(
double p,
double drynessX)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamHPQ(
		p,
		drynessX)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamVPTArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "t","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamVPT("xlddSteamVPT",
"ddSteamVPT",
"too lazy to comment this function ",
LibraryName,
ddSteamVPTArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamVPT(
double p,
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamVPT(
		p,
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamVPHArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "h","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamVPH("xlddSteamVPH",
"ddSteamVPH",
"too lazy to comment this function ",
LibraryName,
ddSteamVPHArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamVPH(
double p,
double h)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamVPH(
		p,
		h)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamVPSArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "s","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamVPS("xlddSteamVPS",
"ddSteamVPS",
"too lazy to comment this function ",
LibraryName,
ddSteamVPSArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamVPS(
double p,
double s)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamVPS(
		p,
		s)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamRhoPTArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "t","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamRhoPT("xlddSteamRhoPT",
"ddSteamRhoPT",
"too lazy to comment this function ",
LibraryName,
ddSteamRhoPTArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamRhoPT(
double p,
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamRhoPT(
		p,
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamRhoPHArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "h","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamRhoPH("xlddSteamRhoPH",
"ddSteamRhoPH",
"too lazy to comment this function ",
LibraryName,
ddSteamRhoPHArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamRhoPH(
double p,
double h)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamRhoPH(
		p,
		h)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamRhoPSArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "s","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamRhoPS("xlddSteamRhoPS",
"ddSteamRhoPS",
"too lazy to comment this function ",
LibraryName,
ddSteamRhoPSArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamRhoPS(
double p,
double s)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamRhoPS(
		p,
		s)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamSPTArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "t","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamSPT("xlddSteamSPT",
"ddSteamSPT",
"too lazy to comment this function ",
LibraryName,
ddSteamSPTArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamSPT(
double p,
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamSPT(
		p,
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamSPHArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "h","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamSPH("xlddSteamSPH",
"ddSteamSPH",
"too lazy to comment this function ",
LibraryName,
ddSteamSPHArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamSPH(
double p,
double h)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamSPH(
		p,
		h)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamCpPTArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "t","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamCpPT("xlddSteamCpPT",
"ddSteamCpPT",
"too lazy to comment this function ",
LibraryName,
ddSteamCpPTArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamCpPT(
double p,
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamCpPT(
		p,
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamCpPHArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "h","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamCpPH("xlddSteamCpPH",
"ddSteamCpPH",
"too lazy to comment this function ",
LibraryName,
ddSteamCpPHArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamCpPH(
double p,
double h)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamCpPH(
		p,
		h)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamCvPTArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "t","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamCvPT("xlddSteamCvPT",
"ddSteamCvPT",
"too lazy to comment this function ",
LibraryName,
ddSteamCvPTArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamCvPT(
double p,
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamCvPT(
		p,
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamCvPHArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "h","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamCvPH("xlddSteamCvPH",
"ddSteamCvPH",
"too lazy to comment this function ",
LibraryName,
ddSteamCvPHArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamCvPH(
double p,
double h)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamCvPH(
		p,
		h)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamCvPSArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "s","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamCvPS("xlddSteamCvPS",
"ddSteamCvPS",
"too lazy to comment this function ",
LibraryName,
ddSteamCvPSArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamCvPS(
double p,
double s)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamCvPS(
		p,
		s)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamVisPTArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "t","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamVisPT("xlddSteamVisPT",
"ddSteamVisPT",
"too lazy to comment this function ",
LibraryName,
ddSteamVisPTArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamVisPT(
double p,
double t)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamVisPT(
		p,
		t)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamVisPHArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "h","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamVisPH("xlddSteamVisPH",
"ddSteamVisPH",
"too lazy to comment this function ",
LibraryName,
ddSteamVisPHArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamVisPH(
double p,
double h)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamVisPH(
		p,
		h)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamVisPSArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "s","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamVisPS("xlddSteamVisPS",
"ddSteamVisPS",
"too lazy to comment this function ",
LibraryName,
ddSteamVisPSArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamVisPS(
double p,
double s)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamVisPS(
		p,
		s)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamQPHArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "h","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamQPH("xlddSteamQPH",
"ddSteamQPH",
"too lazy to comment this function ",
LibraryName,
ddSteamQPHArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamQPH(
double p,
double h)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamQPH(
		p,
		h)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
ddSteamQPSArgs[]=
{
{ "p","too lazy to comment this one ","B"},
{ "s","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerddSteamQPS("xlddSteamQPS",
"ddSteamQPS",
"too lazy to comment this function ",
LibraryName,
ddSteamQPSArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlddSteamQPS(
double p,
double s)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	ddSteamQPS(
		p,
		s)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

